#!/bin/bash
# input:  result.csv(generated by run.sh), run.log(generated by benchmark.sh)
# output:
# 
# Doris version:  master-a97f63141-release-20220916095350
# Relative time(to total):        5.4725527478471845
# Relative time(to machine):      2.2190098382960985
# machine: c6a.4xlarge,500gb gp2
# query   cold    hot1    hot2    best    total_baseline  ratio_of_total  machine_baseline        ratio_of_machine
# query1  1.02    0.05    1.05    0.05    0.000155000     5.908419498     0.000155000     5.908419498
# query2  0.13    0.04    0.04    0.04    0.010000000     2.500000000     0.010000000     2.500000000
# query3  0.35    0.06    0.05    0.05    0.010000000     3.000000000     0.033000000     1.395348837
# query4  1.58    0.05    0.05    0.05    0.010000000     3.000000000     0.029207000     1.530338970
# query5  1.56    1.53    1.51    1.51    0.109031000     12.769782662    0.620000000     2.412698413
# query6  1.20    0.90    0.92    0.90    0.176052000     4.891105712     0.930000000     0.968085106
# query7  0.15    0.10    0.10    0.10    0.010000000     5.500000000     0.024000000     3.235294118
# query8  0.05    0.04    0.04    0.04    0.010000000     2.500000000     0.015000000     2.000000000
# query9  0.78    0.78    0.76    0.76    0.133104000     5.380702147     0.580000000     1.305084746
# query10 0.90    0.90    0.88    0.88    0.284000000     3.027210884     0.680000000     1.289855072
# query11 0.24    0.18    0.18    0.18    0.088729000     1.924459885     0.090000000     1.900000000
# query12 0.23    0.21    0.21    0.21    0.080000000     2.444444444     0.090000000     2.200000000
# query13 0.80    0.76    0.75    0.75    0.158393000     4.513251738     0.294000000     2.500000000
# query14 1.24    1.55    1.55    1.55    0.213000000     6.995515695     1.029000000     1.501443696
# query15 1.20    1.09    1.06    1.06    0.174000000     5.815217391     0.897000000     1.179713341
# query16 0.51    0.51    0.52    0.51    0.143406000     3.389697926     0.550000000     0.928571429
# query17 1.56    1.58    1.58    1.58    0.339775000     4.545779430     2.350000000     0.673728814
# query18 0.32    0.31    0.40    0.31    0.275000000     1.122807018     0.370000000     0.842105263
# query19 3.28    3.35    3.26    3.26    0.506000000     6.337209302     4.380000000     0.744874715
# query20 0.02    0.02    0.02    0.02    0.000157442     2.953499513     0.000157442     2.953499513
# query21 11.93   0.96    0.95    0.95    0.070000000     12.000000000    0.070000000     12.000000000
# query22 8.78    3.32    0.85    0.85    0.140000000     5.733333333     0.395884000     2.118831982
# query23 12.57   0.99    0.89    0.89    0.310000000     2.812500000     0.395477000     2.219608017
# query24 36.80   2.54    2.44    2.44    0.046760200     43.164048048    0.335000000     7.101449275
# query25 3.16    0.37    0.36    0.36    0.002459360     29.696549421    0.005000000     24.666666667
# query26 0.33    0.32    0.32    0.32    0.045000000     6.000000000     0.130000000     2.357142857
# query27 0.37    0.36    0.36    0.36    0.058000000     5.441176471     0.139861000     2.468954565
# query28 11.56   1.46    1.43    1.43    0.130000000     10.285714286    0.733000000     1.938088829
# query29 9.06    3.85    3.66    3.66    0.483000000     7.444219067     5.570000000     0.657706093
# query30 0.88    0.79    0.81    0.79    0.203014000     3.755621696     0.713598326     1.105585753
# query31 2.06    0.66    0.66    0.66    0.113000000     5.447154472     0.520000000     1.264150943
# query32 2.47    0.73    0.74    0.73    0.175000000     4.000000000     0.712000000     1.024930748
# query33 4.45    4.31    4.34    4.31    0.048000000     74.482758621    4.820000000     0.894409938
# query34 12.95   6.67    6.90    6.67    0.494000000     13.253968254    0.494000000     13.253968254
# query35 12.28   6.53    6.12    6.12    0.544000000     11.064981949    4.035000000     1.515451174
# query36 1.47    1.42    1.42    1.42    0.137629000     9.686443720     1.188000000     1.193656093
# query37 0.44    0.36    0.33    0.33    0.040539136     6.727459686     0.040539136     6.727459686
# query38 0.37    0.34    0.33    0.33    0.019683109     11.454325758    0.019683109     11.454325758
# query39 0.06    0.06    0.06    0.06    0.010000000     3.500000000     0.010000000     3.500000000
# query40 0.24    0.20    0.20    0.20    0.085472760     2.199580278     0.085472760     2.199580278
# query41 0.07    0.05    0.05    0.05    0.007633564     3.402601992     0.007633564     3.402601992
# query42 0.05    0.06    0.06    0.06    0.007858586     3.919683227     0.007858586     3.919683227
# query43 0.04    0.04    0.04    0.04    0.010000000     2.500000000     0.010000000     2.500000000
# total   149.51  50.4    48.25   46.84

total_baseline=(0.000155 0.01 0.01 0.01 0.109031 0.176052 0.01 0.01 0.133104 0.284 0.088729 0.08 0.158393 0.213 0.174 0.143406 0.339775 0.275 0.506 0.000157442 0.07 0.14 0.31 0.0467602 0.00245936 0.045 0.058 0.13 0.483 0.203014 0.113 0.175 0.048 0.494 0.544 0.137629 0.040539136 0.019683109 0.01 0.08547276 0.007633564 0.007858586 0.01)

machine_baseline=(0.000155 0.01 0.033 0.029207 0.62 0.93 0.024 0.015 0.58 0.68 0.09 0.09 0.294 1.029 0.897 0.55 2.35 0.37 4.38 0.000157442 0.07 0.395884 0.395477 0.335 0.005 0.13 0.139861 0.733 5.57 0.713598326 0.52 0.712 4.82 0.494 4.035 1.188 0.040539136 0.019683109 0.01 0.08547276 0.007633564 0.007858586 0.01 )

awk -F ',' '{if($3<$4){print $3}else{print $4}}' result.csv > best_hot.csv
i=0
product=1
while read doris;do
    r=$(echo "scale=9;(${doris} + 0.01) / (${total_baseline[$i]} + 0.01)" | bc)
    let i++
    product=$(echo "scale=9; $product * $r" | bc)
done < best_hot.csv
total_score=$(echo "print(pow($product, 1.0/43))" | python3)

i=0
product=1
while read doris;do
    r=$(echo "scale=9;(${doris} + 0.01) / (${machine_baseline[$i]} + 0.01)" | bc)
    let i++
    product=$(echo "scale=9; $product * $r" | bc)
done < best_hot.csv
machine_score=$(echo "print(pow($product, 1.0/43))" | python3)

total_cold=$(awk -F ',' '{sum+=$2} END {print sum}' result.csv)
total_hot1=$(awk -F ',' '{sum+=$3} END {print sum}' result.csv)
total_hot2=$(awk -F ',' '{sum+=$4} END {print sum}' result.csv)
total_best_hot=$(awk -F ',' '{if($3<$4){sum+=$3}else{sum+=$4}} END {print sum}' result.csv)
echo "${total_baseline[*]}" | tr ' ' '\n' | awk '{printf("%.9f\n", $1)}' > total_baseline.csv
paste best_hot.csv total_baseline.csv | awk '{r=($1+0.01)/($2+0.01); printf("%.9f\n", r)}' >hot_ratio_to_total_baseline.csv
echo "${machine_baseline[*]}" | tr ' ' '\n' | awk '{printf("%.9f\n", $1)}' > machine_baseline.csv
paste best_hot.csv machine_baseline.csv | awk '{r=($1+0.01)/($2+0.01); printf("%.9f\n", r)}' >hot_ratio_to_machine_baseline.csv

echo -e "Doris version:\t$(head -n1 run.log)"
echo -e "Relative time(to total):\t$total_score"
echo -e "Relative time(to machine):\t$machine_score"
echo -e "machine: c6a.4xlarge,500gb gp2"
echo -e "query \tcold \thot1 \thot2 \tbest \ttotal_baseline \tratio_of_total \tmachine_baseline \tratio_of_machine"
paste result.csv best_hot.csv total_baseline.csv hot_ratio_to_total_baseline.csv machine_baseline.csv hot_ratio_to_machine_baseline.csv | tr ',' '\t'
echo -e "total\t${total_cold}\t${total_hot1}\t${total_hot2}\t${total_best_hot}"
rm -f best_hot.csv total_baseline.csv hot_ratio_to_total_baseline.csv machine_baseline.csv hot_ratio_to_machine_baseline.csv